package com.netguru.app.cache

import androidx.room.Room
import androidx.test.platform.app.InstrumentationRegistry
import com.netguru.app.util.InstantExecutorExtension
import com.netguru.randomcity.cache.ApplicationDatabase
import com.netguru.randomcity.cache.dao.CityDao
import com.netguru.randomcity.cache.dao.CityEntity
import com.netguru.randomcity.producer.data.Color
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import java.time.LocalDateTime

@ExtendWith(InstantExecutorExtension::class)
class ApplicationDatabaseTest {

    private lateinit var applicationDatabase: ApplicationDatabase
    private lateinit var cityDao: CityDao

    @BeforeEach
    fun setup() {
        applicationDatabase = Room.inMemoryDatabaseBuilder(
            InstrumentationRegistry.getInstrumentation().context,
            ApplicationDatabase::class.java
        ).allowMainThreadQueries()
            .build()
        cityDao = applicationDatabase.cityDao()
    }

    @Test
    fun testCityInsertion() {
        val city = CityEntity(
            name = "something",
            color = Color.WHITE,
            createdTime = LocalDateTime.MIN
        )
        cityDao.insert(city)
        val testObserver = cityDao.getAllSortedAlphabetically().test()
        val result = testObserver.values().last()
        assertThat(result).hasSize(1)
    }

    @Test
    fun autoGeneratedIdIsDifferentThan0() {
        val city = CityEntity(
            name = "something",
            color = Color.WHITE,
            createdTime = LocalDateTime.MIN
        )
        val size = 5
        repeat(size) {
            cityDao.insert(city)
        }
        val testObserver = cityDao.getAllSortedAlphabetically().test()
        val result = testObserver.values().last()
        val distinctIds = result.distinctBy(CityEntity::id)
        assertThat(distinctIds).hasSize(size)
        distinctIds.forEach { entity ->
            assertThat(entity.id).isNotEqualTo(0L)
        }
    }

    @AfterEach
    fun tearDown() {
        applicationDatabase.close()
    }
}